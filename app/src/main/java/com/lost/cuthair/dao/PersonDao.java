package com.lost.cuthair.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lost.cuthair.dao.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERSON.
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(2, Boolean.class, "sex", false, "SEX");
        public final static Property Height = new Property(3, String.class, "height", false, "HEIGHT");
        public final static Property Size = new Property(4, String.class, "size", false, "SIZE");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
        public final static Property Birthday = new Property(6, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Hate = new Property(7, String.class, "hate", false, "HATE");
        public final static Property Weixin = new Property(8, String.class, "weixin", false, "WEIXIN");
        public final static Property Qq = new Property(9, String.class, "qq", false, "QQ");
        public final static Property Constellation = new Property(10, String.class, "constellation", false, "CONSTELLATION");
        public final static Property Phone = new Property(11, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(12, String.class, "address", false, "ADDRESS");
        public final static Property Image = new Property(13, String.class, "image", false, "IMAGE");
        public final static Property Job = new Property(14, String.class, "job", false, "JOB");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
        public final static Property Label = new Property(16, String.class, "label", false, "LABEL");
        public final static Property Money = new Property(17, String.class, "money", false, "MONEY");
        public final static Property Discount = new Property(18, String.class, "discount", false, "DISCOUNT");
        public final static Property Number = new Property(19, String.class, "number", false, "NUMBER");
        public final static Property Date = new Property(20, String.class, "date", false, "DATE");
    };

    private DaoSession daoSession;


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERSON' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'SEX' INTEGER," + // 2: sex
                "'HEIGHT' TEXT," + // 3: height
                "'SIZE' TEXT," + // 4: size
                "'COLOR' TEXT," + // 5: color
                "'BIRTHDAY' TEXT," + // 6: birthday
                "'HATE' TEXT," + // 7: hate
                "'WEIXIN' TEXT," + // 8: weixin
                "'QQ' TEXT," + // 9: qq
                "'CONSTELLATION' TEXT," + // 10: constellation
                "'PHONE' TEXT," + // 11: phone
                "'ADDRESS' TEXT," + // 12: address
                "'IMAGE' TEXT," + // 13: image
                "'JOB' TEXT," + // 14: job
                "'REMARK' TEXT," + // 15: remark
                "'LABEL' TEXT," + // 16: label
                "'MONEY' TEXT," + // 17: money
                "'DISCOUNT' TEXT," + // 18: discount
                "'NUMBER' TEXT," + // 19: number
                "'DATE' TEXT);"); // 20: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Boolean sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(3, sex ? 1l: 0l);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(4, height);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(5, size);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(7, birthday);
        }
 
        String hate = entity.getHate();
        if (hate != null) {
            stmt.bindString(8, hate);
        }
 
        String weixin = entity.getWeixin();
        if (weixin != null) {
            stmt.bindString(9, weixin);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(10, qq);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(11, constellation);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(13, address);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(14, image);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(15, job);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(17, label);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(18, money);
        }
 
        String discount = entity.getDiscount();
        if (discount != null) {
            stmt.bindString(19, discount);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(20, number);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(21, date);
        }
    }

    @Override
    protected void attachEntity(Person entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // weixin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // qq
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // constellation
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // image
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // job
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // label
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // money
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // discount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // number
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWeixin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQq(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setConstellation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setJob(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLabel(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMoney(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDiscount(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNumber(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
